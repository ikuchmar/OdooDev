#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Context Docs Viewer ‚Äî –ø—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ Markdown —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º.
–û–¥–∏–Ω —Ñ–∞–π–ª. –¢–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞. Python 3.8+.

–°–¢–†–£–ö–¢–£–†–ê –ö–û–î–ê (—É–ø—Ä–æ—â–µ–Ω–∞ –∏ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞):
1) –î–æ–∫—Å—Ç—Ä–∏–Ω–≥ (–≤—ã –∑–¥–µ—Å—å)
2) –ò–º–ø–æ—Ä—Ç—ã
3) –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
4) –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ .md
5) –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
6) –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è UI (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã)
7) –£—Ç–∏–ª–∏—Ç—ã (–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤, –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏)
8) –ö–ª–∞—Å—Å App_UI (–≤—Å—è –ª–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
9) main()
10) if __name__ == '__main__': main()

–û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê:
- –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É docs/, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –û–î–ò–ù —É—Ä–æ–≤–µ–Ω—å –í–´–®–ï —Å–∫—Ä–∏–ø—Ç–∞ (../docs).
- –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏: node_modules, .git, site, .venv, venv, __pycache__.
- –ß–∏—Ç–∞–µ–º .md —Ñ–∞–π–ª—ã –≤ UTF-8, –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî cp1251.
- –ü–∞—Ä—Å–∏–º —Å–µ–∫—Ü–∏–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ "## <–∫–ª—é—á>".
- –ü–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º "categories: ..." –∏/–∏–ª–∏ "aliases: ...".
- –ò–∑ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º: display_key, key, tokens, categories, aliases, file_path, start_line, markdown, code_blocks.
- –ü–æ–∏—Å–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–∞, —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞–ª–∏–∞—Å–∞–º, –ø–æ–¥—Å—Ç—Ä–æ–∫—É, —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º, fuzzy-–ø–æ–∏—Å–∫.
- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å tkinter —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ.

–ü–†–ò–ú–ï–ß–ê–ù–ò–ï –ü–û –ü–†–û–°–¢–û–¢–ï:
- –ö–æ–¥ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏–Ω–µ–π–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω ‚Äî –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π.
- –í—Å–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ‚Äî –æ–±—ã—á–Ω—ã–µ dict/list, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ.
"""

# 2) –ò–º–ø–æ—Ä—Ç—ã
import os
import sys
import re
import subprocess
from pathlib import Path
from typing import List, Dict, Tuple, Optional
import tkinter as tk
from tkinter import ttk, filedialog, messagebox

# 3) –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
IGNORED_DIRS = {"node_modules", ".git", "site", ".venv", "venv", "__pycache__"}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤/–∏–∫–æ–Ω–æ–∫ –¥–ª—è –¥–µ—Ä–µ–≤–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
ICON_FOLDER = "üìÅ "
ICON_FILE = "üìÑ "
ICON_SECTION = "¬ß "

# 4) –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ .md

def read_text_file(path: Path) -> str:
    """
    –ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è UTF-8, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî cp1251.
    –ó–∞—á–µ–º: –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–∫–∞—Ö.
    """
    try:
        return path.read_text(encoding="utf-8")
    except UnicodeDecodeError:
        return path.read_text(encoding="cp1251", errors="replace")


def normalize_key(s: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –∫–ª—é—á –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –æ–±—Ä–µ–∑–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã.
    –ó–∞—á–µ–º: —Ö—Ä–∞–Ω–∏—Ç—å –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
    """
    return (s or "").strip().lower()


def tokenize(s: str) -> List[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Ç–æ–∫–µ–Ω—ã –ø–æ –ª—é–±—ã–º —Å–∏–º–≤–æ–ª–∞–º, –ù–ï —è–≤–ª—è—é—â–∏–º—Å—è a-z, 0-9, –∏–ª–∏ _.
    –ü—Ä–∏–º–µ—Ä: 'ul-ol-li' -> ['ul','ol','li']
    –ó–∞—á–µ–º: –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –∫–ª—é—á–∞ –∏ –±–æ–ª–µ–µ –≥–∏–±–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é.
    """
    s = normalize_key(s)
    # re.split –≤–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    tokens = re.split(r"[^a-z0-9_]+", s)
    # –£–¥–∞–ª–∏–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ
    return [t for t in tokens if t]


def parse_aliases_line(line: str) -> List[str]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∞–ª–∏–∞—Å–æ–≤ –≤–∏–¥–∞: 'aliases: a1, a2; a3 a4'
    –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ ‚Äî –∑–∞–ø—è—Ç–∞—è, —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π, –ø—Ä–æ–±–µ–ª—ã. –†–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.
    –ó–∞—á–µ–º: —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ.
    """
    # –û—Ç—Ä–µ–∂–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'aliases:' (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞), –∑–∞—Ç–µ–º —Ä–∞–∑–æ–±—å—ë–º –ø–æ , ; –∏ –ø—Ä–æ–±–µ–ª–∞–º
    body = re.sub(r"(?i)^aliases:\s*", "", line).strip()
    # –†–∞–∑–æ–±—å—ë–º –ø–æ –∑–∞–ø—è—Ç—ã–º/—Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–∞–º
    raw = re.split(r"[,\s;]+", body)
    return [normalize_key(a) for a in raw if a]


def parse_categories_line(line: str) -> List[str]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–∏–¥–∞: 'categories: –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1 - –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è - ...'
    –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî –¥–µ—Ñ–∏—Å (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–æ–∫—Ä—É–≥ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    –ì–ª—É–±–∏–Ω–∞ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.
    –ó–∞—á–µ–º: –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ UI.
    """
    body = re.sub(r"(?i)^categories:\s*", "", line).strip()
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–µ—Ñ–∏—Å–∞–º —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–æ–∫—Ä—É–≥
    raw = re.split(r"\s*-\s*", body)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ normalize), —Ç.–∫. –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º ‚Äú–∫—Ä–∞—Å–∏–≤–æ‚Äù, —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
    return [c.strip() for c in raw if c.strip()]


def extract_code_blocks(markdown: str) -> List[Dict[str, str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–µ–∫—Ü–∏–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ —è–∑—ã–∫–∏: –ø–æ—Å–ª–µ ``` –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ (–≤ —Ç.—á. 'c++' –∏–ª–∏ 'tsx').
    –ó–∞—á–µ–º: –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.
    """
    code_blocks = []
    # –†–∞–∑–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, —Ç.–∫. –ø—Ä–æ—â–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –±–ª–æ–∫–∞
    lines = markdown.splitlines()
    in_block = False
    lang = ""
    buf = []

    for line in lines:
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞: —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ```
        if not in_block and line.strip().startswith("```"):
            in_block = True
            # –Ø–∑—ã–∫ ‚Äî –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ ``` –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
            lang = line.strip()[3:].strip()
            buf = []
            continue
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞
        if in_block and line.strip().startswith("```"):
            code_blocks.append({"lang": lang, "code": "\n".join(buf)})
            in_block = False
            lang = ""
            buf = []
            continue
        # –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        if in_block:
            buf.append(line)

    return code_blocks


def parse_markdown_file(path: Path, docs_root: Path) -> List[Dict]:
    """
    –ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω .md —Ñ–∞–π–ª –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º '## <–∫–ª—é—á>'.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π-—Å–µ–∫—Ü–∏–π.
    –ö–∞–∂–¥–∞—è —Å–µ–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç:
      - display_key: –∏—Å—Ö–æ–¥–Ω—ã–π –∫–ª—é—á (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
      - key: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á (lowercase)
      - tokens: —Ç–æ–∫–µ–Ω—ã –∫–ª—é—á–∞ (–¥–ª—è –ø–æ–∏—Å–∫–∞)
      - categories: —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
      - aliases: —Å–ø–∏—Å–æ–∫ –∞–ª–∏–∞—Å–æ–≤ (lowercase)
      - file_path: –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (Path)
      - rel_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è docs (str)
      - start_line: –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ (int, –Ω–∞—á–∏–Ω–∞—è —Å 1)
      - markdown: –ø–æ–ª–Ω—ã–π markdown-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ (str)
      - code_blocks: —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ [{'lang':..., 'code':...}, ...]
    """
    text = read_text_file(path)
    lines = text.splitlines()
    sections: List[Dict] = []

    current = None  # —Ç–µ–∫—É—â–∞—è —Å–µ–∫—Ü–∏—è, –ø–æ–∫–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º
    current_lines: List[str] = []
    start_line = 0

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
    def flush_section():
        if current is None:
            return
        md = "\n".join(current_lines).strip()
        # –ò–∑–≤–ª–µ—á—ë–º –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏
        code_blocks = extract_code_blocks(md)
        # –ó–∞–ø–∏—à–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
        sections.append({
            "display_key": current["display_key"],
            "key": normalize_key(current["display_key"]),
            "tokens": tokenize(current["display_key"]),
            "categories": current.get("categories", []),
            "aliases": current.get("aliases", []),
            "file_path": path,
            "rel_path": str(path.relative_to(docs_root)),
            "start_line": start_line,
            "markdown": md,
            "code_blocks": code_blocks,
        })

    i = 0
    while i < len(lines):
        line = lines[i]
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏ ‚Äî —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '## ' (–¥–≤–µ —Ä–µ—à—ë—Ç–∫–∏ –∏ –ø—Ä–æ–±–µ–ª)
        if line.startswith("## "):
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ–∫—Ü–∏—è –±—ã–ª–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –µ—ë
            flush_section()
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
            header_text = line[3:].strip()  # —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ '## '
            current = {
                "display_key": header_text,
                "categories": [],
                "aliases": [],
            }
            current_lines = []  # –æ–±–Ω—É–ª—è–µ–º –±—É—Ñ–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            start_line = i + 1  # –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (—á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π, —Å 1)

            # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–æ–≥—É—Ç –∏–¥—Ç–∏ —Å—Ç—Ä–æ–∫–∏ categories:/aliases: –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ,
            # –∏—Ö —Å—á–∏—Ç–∞–µ–º —á–∞—Å—Ç—å—é "–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", –∞ –Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–µ–∫—Ü–∏–∏.
            j = i + 1
            while j < len(lines):
                mline = lines[j].strip()
                # –ï—Å–ª–∏ –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                if mline.startswith("## "):
                    break
                # –ü—Ä–æ–ø—É—Å—Ç–∏–º —á–∏—Å—Ç—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ '===' –∏–ª–∏ '---' ‚Äî –æ–Ω–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã –∏ –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –≤–ª–∏—è—é—Ç
                if set(mline) <= {"=", "-"} and len(mline) >= 3:
                    j += 1
                    continue
                # categories:
                if re.match(r"(?i)^categories:\s*", mline):
                    current["categories"] = parse_categories_line(mline)
                    j += 1
                    continue
                # aliases:
                if re.match(r"(?i)^aliases:\s*", mline):
                    current["aliases"] = parse_aliases_line(mline)
                    j += 1
                    continue
                # –ü—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º
                if mline.strip() == "":
                    j += 1
                    continue
                # –ò–Ω–∞—á–µ ‚Äî —ç—Ç–æ —É–∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏
                break

            # –¢–µ–ø–µ—Ä—å —Å –ø–æ–∑–∏—Ü–∏–∏ j –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏
            i = j
            continue

        # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è —É–∂–µ –Ω–∞—á–∞—Ç–∞ ‚Äî –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        if current is not None:
            current_lines.append(line)

        i += 1

    # –í –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ –Ω–µ –∑–∞–±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
    flush_section()
    return sections


def scan_docs(docs_root: Path) -> Tuple[List[Dict], Dict[Path, List[Dict]]]:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ docs_root, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏.
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ .md —Ñ–∞–π–ª—ã –∏ –ø–∞—Ä—Å–∏—Ç –∏—Ö —Å–µ–∫—Ü–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π (list)
      - —Å–ª–æ–≤–∞—Ä—å file->list[sections] (–¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤)
    """
    all_sections: List[Dict] = []
    file_map: Dict[Path, List[Dict]] = {}

    for dirpath, dirnames, filenames in os.walk(docs_root):
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ‚Äî –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º dirnames –Ω–∞ –º–µ—Å—Ç–µ,
        # —á—Ç–æ–±—ã os.walk –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –≤–Ω—É—Ç—Ä—å
        dirnames[:] = [d for d in dirnames if d not in IGNORED_DIRS]

        for name in filenames:
            if not name.lower().endswith(".md"):
                continue
            fpath = Path(dirpath) / name
            sections = parse_markdown_file(fpath, docs_root)
            if sections:
                file_map[fpath] = sections
                all_sections.extend(sections)

    return all_sections, file_map

# 5) –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def build_indexes(sections: List[Dict]) -> Dict[str, List[Dict]]:
    """
    –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
      - 'by_key' -> dict[str, List[section]]
      - 'by_alias' -> dict[str, List[section]]
    –ó–∞—á–µ–º: —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.
    """
    by_key: Dict[str, List[Dict]] = {}
    by_alias: Dict[str, List[Dict]] = {}
    for s in sections:
        by_key.setdefault(s["key"], []).append(s)
        for a in s.get("aliases", []):
            by_alias.setdefault(a, []).append(s)
    return {"by_key": by_key, "by_alias": by_alias}


def fuzzy_ratio(a: str, b: str) -> float:
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∏–π fuzzy-–∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –±–∞–∑–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 0..1, –≥–¥–µ 1 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Ö–æ–∂–µ—Å—Ç—å.
    """
    import difflib
    return difflib.SequenceMatcher(None, a, b).ratio()


def score_section(query: str, query_tokens: List[str], s: Dict]) -> Tuple[int, float]:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç "–≤–µ—Å" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—É (priority, fuzzy), –≥–¥–µ priority ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ ‚Äî –≤–∞–∂–Ω–µ–µ),
    –∞ fuzzy ‚Äî –¥—Ä–æ–±–Ω–æ–µ (–¥–ª—è –¥–æ–ø. —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞).

    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –≤—ã—à–µ –≤ –≤—ã–¥–∞—á–µ):
      1000 ‚Äî —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–∞
       900 ‚Äî —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞
       800 ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –≤ –∫–ª—é—á–µ/–∞–ª–∏–∞—Å–∞—Ö
       700 ‚Äî —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ç–æ–∫–µ–Ω–∞–º
       400 ‚Äî fuzzy-–ø–æ—Ö–æ–∂–∏–µ –∫–ª—é—á/–∞–ª–∏–∞—Å—ã (>0.6)

    –ó–∞—á–µ–º: —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö.
    """
    key = s["key"]
    aliases = s.get("aliases", [])
    tokens = s.get("tokens", [])

    # 1) –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–∞
    if query == key:
        return 1000, 1.0
    # 2) –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞
    if query in aliases:
        return 900, 1.0
    # 3) –ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –≤ –∫–ª—é—á–µ –∏–ª–∏ –∞–ª–∏–∞—Å–∞—Ö
    if query and (query in key or any(query in a for a in aliases)):
        return 800, 1.0
    # 4) –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ç–æ–∫–µ–Ω–∞–º (–ª—é–±–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∫–ª—é—á–∞)
    if query_tokens and any(t in tokens for t in query_tokens):
        # –ß–µ–º –±–æ–ª—å—à–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π ‚Äî —Ç–µ–º –ª—É—á—à–µ. –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—Ç–∞–≤–∏–º –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å.
        return 700, 1.0
    # 5) Fuzzy ‚Äî –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –ø–æ –∫–ª—é—á—É –∏ –∞–ª–∏–∞—Å–∞–º
    fuzz_key = fuzzy_ratio(query, key) if query else 0.0
    fuzz_ali = max((fuzzy_ratio(query, a) for a in aliases), default=0.0) if query else 0.0
    fuzz = max(fuzz_key, fuzz_ali)
    if fuzz >= 0.6:
        return 400, fuzz
    return 0, fuzz


def search_sections(query_raw: str, sections: List[Dict], indexes: Dict[str, Dict[str, List[Dict]]]) -> Tuple[Optional[Dict], List[Dict]]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
      (best_section_or_None, candidates_sorted_list)
    –ì–¥–µ best_section ‚Äî –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ/–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
    –ï—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî UI –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.

    –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:
      - –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–∞ ‚Äî –æ–Ω–æ –ø–µ—Ä–≤–æ–µ;
      - –∑–∞—Ç–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤;
      - –∑–∞—Ç–µ–º –ø–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–µ, —Ç–æ–∫–µ–Ω–Ω—ã–µ, –∏ —Ç.–¥.
    """
    query = normalize_key(query_raw)
    if not query:
        return None, []

    query_tokens = tokenize(query)

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä—ë–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Äî –ø—Ä–æ–π–¥–µ–º –ø–æ –≤—Å–µ–º —Å–µ–∫—Ü–∏—è–º –∏ –ø–æ—Å—á–∏—Ç–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    scored: List[Tuple[int, float, Dict]] = []
    for s in sections:
        prio, fuzz = score_section(query, query_tokens, s)
        if prio > 0:
            scored.append((prio, fuzz, s))

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not scored:
        return None, []

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—É–±—ã–≤.), –∑–∞—Ç–µ–º –ø–æ fuzzy (—É–±—ã–≤.), –∑–∞—Ç–µ–º –ø–æ –∫–ª—é—á—É (–∞–ª—Ñ–∞–≤–∏—Ç)
    scored.sort(key=lambda x: (-x[0], -x[1], x[2]["display_key"]))
    candidates = [s for (_, _, s) in scored]

    # –õ—É—á—à–∏–π ‚Äî –ø–µ—Ä–≤—ã–π
    best = candidates[0] if candidates else None
    return best, candidates

# 6) –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è UI

def build_category_index(sections: List[Dict]) -> Dict[Tuple[str, ...], List[Dict]]:
    """
    –°—Ç—Ä–æ–∏—Ç –∏–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –∫–ª—é—á ‚Äî –∫–æ—Ä—Ç–µ–∂ –∏–∑ –ø—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ('Web','HTML','–°–ø–∏—Å–∫–∏'),
    –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π "–ø–∞–ø–∫–∏".
    –ó–∞—á–µ–º: —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏".
    """
    idx: Dict[Tuple[str, ...], List[Dict]] = {}
    for s in sections:
        cats = tuple(s.get("categories", []) or [])
        idx.setdefault(cats, []).append(s)
    return idx


def build_file_tree_map(file_map: Dict[Path, List[Dict]], docs_root: Path) -> Dict:
    """
    –ò–∑ —Å–ª–æ–≤–∞—Ä—è file->sections —Å—Ç—Ä–æ–∏—Ç –ø—Ä–æ—Å—Ç—É—é –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ dict:
      {"dir": {"subdir": {...}, "file.md": [sections...]}, ...}
    –ó–∞—á–µ–º: —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤ —Å —Å–µ–∫—Ü–∏—è–º–∏.
    """
    tree = {}
    for fpath, sections in file_map.items():
        rel = fpath.relative_to(docs_root)
        parts = rel.parts
        node = tree
        for p in parts[:-1]:  # –≤—Å–µ –ø–∞–ø–∫–∏
            node = node.setdefault(p, {})
        # –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —Ñ–∞–π–ª
        node.setdefault(parts[-1], sections)
    return tree

# 7) –£—Ç–∏–ª–∏—Ç—ã

def open_in_system(path: Path) -> None:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª/–ø–∞–ø–∫—É —à—Ç–∞—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –û–°.
    Windows: os.startfile
    macOS: 'open'
    Linux: 'xdg-open'
    –ó–∞—á–µ–º: –∫–Ω–æ–ø–∫–∞ '–û—Ç–∫—Ä—ã—Ç—å .md'.
    """
    try:
        if sys.platform.startswith("win"):
            os.startfile(str(path))  # type: ignore[attr-defined]
        elif sys.platform == "darwin":
            subprocess.Popen(["open", str(path)])
        else:
            subprocess.Popen(["xdg-open", str(path)])
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª:\n{e}")


def copy_to_clipboard(root: tk.Tk, text: str) -> None:
    """
    –ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –±–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω.
    –ó–∞—á–µ–º: –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É.
    """
    try:
        root.clipboard_clear()
        root.clipboard_append(text)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\n{e}")


def relpath(path: Path, base: Path) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å path –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ base –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
    –ó–∞—á–µ–º: –∫–æ–º–ø–∞–∫—Ç–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—É—Ç–∏ –≤ UI.
    """
    try:
        return str(path.relative_to(base))
    except Exception:
        return str(path)

# 8) –ö–ª–∞—Å—Å App_UI ‚Äî –≤—Å—è –ª–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —Ä–∞–±–æ—Ç—ã —Å —É–∂–µ –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

class App_UI:
    """
    UI-–∫–ª–∞—Å—Å. –ù–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π, –¥–µ—Ä–µ–≤—å—è.
    –í–Ω—É—Ç—Ä–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –æ—Ç—Ä–∏—Å–æ–≤–∫–∞, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π, –∏—Å—Ç–æ—Ä–∏—è.
    """

    def __init__(self, root: tk.Tk, docs_root: Path, sections: List[Dict], file_map: Dict[Path, List[Dict]]):
        self.root = root
        self.docs_root = docs_root
        self.sections = sections
        self.file_map = file_map

        # –ò–Ω–¥–µ–∫—Å—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.indexes = build_indexes(sections)
        self.cat_index = build_category_index(sections)
        self.file_tree_map = build_file_tree_map(file_map, docs_root)

        # –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–µ–∫—Ü–∏–π (–ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É id)
        self.history: List[Tuple[str, int]] = []  # —Å–ø–∏—Å–æ–∫ (rel_path, start_line)
        self.history_pos: int = -1  # –ø–æ–∑–∏—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        self.current_section: Optional[Dict] = None

        # –ü–æ—Å—Ç—Ä–æ–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self._build_ui()

    # ---------- –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ----------

    def _build_ui(self) -> None:
        self.root.title("Context Docs Viewer")
        self.root.geometry("1100x700")

        # –í–ï–†–•–ù–Ø–Ø –ü–ê–ù–ï–õ–¨ (Topbar) ‚Äî —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ö–µ–º–µ
        topbar = ttk.Frame(self.root, padding=6)
        topbar.pack(side=tk.TOP, fill=tk.X)

        # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
        self.btn_back = ttk.Button(topbar, text="‚óÄ", width=3, command=self.on_back)
        self.btn_back.pack(side=tk.LEFT)

        # –û—Ç—Å—Ç—É–ø 4px
        ttk.Frame(topbar, width=4).pack(side=tk.LEFT)

        # –ö–Ω–æ–ø–∫–∞ –í–ø–µ—Ä—ë–¥
        self.btn_fwd = ttk.Button(topbar, text="‚ñ∂", width=3, command=self.on_forward)
        self.btn_fwd.pack(side=tk.LEFT)

        # –û—Ç—Å—Ç—É–ø 10px
        ttk.Frame(topbar, width=10).pack(side=tk.LEFT)

        # –ú–µ—Ç–∫–∞ –ü–æ–∏—Å–∫:
        ttk.Label(topbar, text="–ü–æ–∏—Å–∫:").pack(side=tk.LEFT)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ ‚Äî —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å—ë –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        self.entry_search = ttk.Entry(topbar)
        self.entry_search.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.entry_search.bind("<Return>", lambda e: self.on_search())

        # –û—Ç—Å—Ç—É–ø 4px
        ttk.Frame(topbar, width=4).pack(side=tk.LEFT)

        # –ö–Ω–æ–ø–∫–∞ –ò—Å–∫–∞—Ç—å
        ttk.Button(topbar, text="–ò—Å–∫–∞—Ç—å", command=self.on_search).pack(side=tk.LEFT)

        # –û—Ç—Å—Ç—É–ø 4px
        ttk.Frame(topbar, width=4).pack(side=tk.LEFT)

        # –ö–Ω–æ–ø–∫–∞ –ù–∞–π—Ç–∏ –≤ –¥–µ—Ä–µ–≤–µ
        ttk.Button(topbar, text="–ù–∞–π—Ç–∏ –≤ –¥–µ—Ä–µ–≤–µ", command=self.on_locate_in_trees).pack(side=tk.LEFT)

        # –û–°–ù–û–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ ‚Äî –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π PanedWindow 1:3
        self.pw_main = ttk.Panedwindow(self.root, orient=tk.HORIZONTAL)
        self.pw_main.pack(fill=tk.BOTH, expand=True)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî Notebook (–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ / –§–∞–π–ª—ã)
        left_frame = ttk.Frame(self.pw_main)  # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥ Notebook
        self.pw_main.add(left_frame, weight=1)

        self.nb_left = ttk.Notebook(left_frame)
        self.nb_left.pack(fill=tk.BOTH, expand=True)

        # –í–∫–ª–∞–¥–∫–∞ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        tab_categories = ttk.Frame(self.nb_left)
        self.nb_left.add(tab_categories, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")

        self.tree_categories = ttk.Treeview(tab_categories, show="tree")
        self.tree_categories.pack(fill=tk.BOTH, expand=True)
        self.tree_categories.bind("<Double-1>", self.on_tree_categories_double)

        # –í–∫–ª–∞–¥–∫–∞ –§–∞–π–ª—ã
        tab_files = ttk.Frame(self.nb_left)
        self.nb_left.add(tab_files, text="–§–∞–π–ª—ã")

        self.tree_files = ttk.Treeview(tab_files, show="tree")
        self.tree_files.pack(fill=tk.BOTH, expand=True)
        self.tree_files.bind("<Double-1>", self.on_tree_files_double)

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π PanedWindow 3:2
        right_frame = ttk.Frame(self.pw_main)
        self.pw_main.add(right_frame, weight=3)

        self.pw_right = ttk.Panedwindow(right_frame, orient=tk.VERTICAL)
        self.pw_right.pack(fill=tk.BOTH, expand=True)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (Markdown-—Ç–µ–∫—Å—Ç)
        top_md = ttk.Frame(self.pw_right, padding=6)
        self.pw_right.add(top_md, weight=3)

        self.txt_md = tk.Text(top_md, wrap=tk.NONE, font=("Consolas", 11))
        self.txt_md.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        scroll_md = ttk.Scrollbar(top_md, orient=tk.VERTICAL, command=self.txt_md.yview)
        scroll_md.pack(side=tk.RIGHT, fill=tk.Y)
        self.txt_md.configure(yscrollcommand=scroll_md.set)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (–ö–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏)
        bottom_code = ttk.Frame(self.pw_right, padding=6)
        self.pw_right.add(bottom_code, weight=2)

        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –≤—ã–±–æ—Ä –±–ª–æ–∫–∞
        bar_code = ttk.Frame(bottom_code)
        bar_code.pack(fill=tk.X)

        ttk.Label(bar_code, text="–ö–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏:").pack(side=tk.LEFT)
        ttk.Frame(bar_code, width=6).pack(side=tk.LEFT)

        self.cb_blocks = ttk.Combobox(bar_code, state="readonly")
        self.cb_blocks.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.cb_blocks.bind("<<ComboboxSelected>>", lambda e: self.on_block_selected())

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∫–æ–¥–∞
        self.txt_code = tk.Text(bottom_code, wrap=tk.NONE, font=("Consolas", 11), height=12)
        self.txt_code.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, pady=(6, 6))

        scroll_code = ttk.Scrollbar(bottom_code, orient=tk.VERTICAL, command=self.txt_code.yview)
        scroll_code.pack(side=tk.RIGHT, fill=tk.Y, pady=(6, 6))
        self.txt_code.configure(yscrollcommand=scroll_code.set)

        # –ù–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞ (–∫–Ω–æ–ø–∫–∏)
        bar_bottom = ttk.Frame(bottom_code)
        bar_bottom.pack(fill=tk.X)

        ttk.Button(bar_bottom, text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –±–ª–æ–∫", command=self.on_copy_section).pack(side=tk.LEFT)
        ttk.Frame(bar_bottom, width=4).pack(side=tk.LEFT)
        ttk.Button(bar_bottom, text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", command=self.on_copy_code).pack(side=tk.LEFT)
        ttk.Frame(bar_bottom, width=4).pack(side=tk.LEFT)
        ttk.Button(bar_bottom, text="–û—Ç–∫—Ä—ã—Ç—å .md", command=self.on_open_md).pack(side=tk.LEFT)

        # –°–ø—Ä–∞–≤–∞ ‚Äî –∫–Ω–æ–ø–∫–∞ –ó–∞–∫—Ä—ã—Ç—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è –ø—É—Å—Ç–æ–π —Ñ—Ä–µ–π–º –∫–∞–∫ –ø—Ä—É–∂–∏–Ω—É)
        ttk.Frame(bar_bottom).pack(side=tk.LEFT, fill=tk.X, expand=True)
        ttk.Button(bar_bottom, text="–ó–∞–∫—Ä—ã—Ç—å", command=self.root.destroy).pack(side=tk.RIGHT)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤
        self._populate_trees()

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø–∞–Ω–µ–ª–µ–π 1:3 –∏ 3:2
        self.root.update_idletasks()
        try:
            w = self.pw_main.winfo_width()
            self.pw_main.sashpos(0, int(w * 0.25))  # 1:3
            h = self.pw_right.winfo_height()
            self.pw_right.sashpos(0, int(h * 0.6))  # 3:2
        except Exception:
            pass

        # –û–±–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
        self._update_history_buttons()

    # ---------- –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ ----------

    def _populate_trees(self) -> None:
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –ø–æ—Å—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é. –ö–ª—é—á ‚Äî –∫–æ—Ä—Ç–µ–∂ –ø—É—Ç–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
        self.tree_categories.delete(*self.tree_categories.get_children())
        self.cat_node_map = {}  # (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Ç—å tuple) -> item_id
        self.cat_section_item = {}  # (rel_path, start_line) -> item_id

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä—ë–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥–æ–±–∞–≤–∏–º –∏—Ö –≤ –¥–µ—Ä–µ–≤–æ
        # –ü—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ([]) —Ç–æ–∂–µ –¥–æ–ø—É—Å—Ç–∏–º—ã ‚Äî —Ç–∞–∫–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ–º–µ—Å—Ç–∏–º –≤ –∫–æ—Ä–µ–Ω—å
        # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        paths = sorted(self.cat_index.keys())
        # –ß—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–ø–æ–∫, —Å–æ–∑–¥–∞–¥–∏–º –ø–æ —á–∞—Å—Ç—è–º
        for path_tuple in paths:
            parent_id = ""
            built = ()
            for part in path_tuple:
                built = built + (part,)
                if built not in self.cat_node_map:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º —É–∑–µ–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    text = part
                    item_id = self.tree_categories.insert(parent_id, "end", text=text, open=False)
                    self.cat_node_map[built] = item_id
                    parent_id = item_id
                else:
                    parent_id = self.cat_node_map[built]

        # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –ª–∏—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äî —Å–µ–∫—Ü–∏–∏
        for path_tuple, secs in self.cat_index.items():
            parent_id = self.cat_node_map.get(path_tuple, "")
            for s in sorted(secs, key=lambda x: x["display_key"]):
                uid = (s["rel_path"], s["start_line"])
                text = f"{ICON_SECTION}{s['display_key']} ({s['rel_path']})"
                item_id = self.tree_categories.insert(parent_id, "end", text=text, open=False, values=(uid,))
                self.cat_section_item[uid] = item_id

        # –§–∞–π–ª—ã: –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤/—Ñ–∞–π–ª–æ–≤
        self.tree_files.delete(*self.tree_files.get_children())
        self.file_item_map = {}      # rel_dir path -> item_id (–ø–∞–ø–∫–∞)
        self.file_section_item = {}  # (rel_path, start_line) -> item_id
        self._add_file_tree_nodes("", self.file_tree_map)

    def _add_file_tree_nodes(self, parent_id: str, node) -> None:
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏–∑ build_file_tree_map
        if isinstance(node, dict):
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —É–∑–µ–ª: –ª–∏–±–æ –ø–∞–ø–∫–∏, –ª–∏–±–æ —Ñ–∞–π–ª—ã
            for name in sorted(node.keys()):
                child = node[name]
                if isinstance(child, dict):
                    # –≠—Ç–æ –ø–∞–ø–∫–∞
                    item_id = self.tree_files.insert(parent_id, "end", text=f"{ICON_FOLDER}{name}", open=False)
                    self._add_file_tree_nodes(item_id, child)
                else:
                    # –≠—Ç–æ —Ñ–∞–π–ª ‚Äî child = [sections...]
                    sections = child
                    item_id = self.tree_files.insert(parent_id, "end", text=f"{ICON_FILE}{name}", open=False)
                    # –î–æ–±–∞–≤–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã ‚Äî —Å–µ–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                    for s in sorted(sections, key=lambda x: x["display_key"]):
                        uid = (s["rel_path"], s["start_line"])
                        sec_id = self.tree_files.insert(item_id, "end", text=f"{ICON_SECTION}{s['display_key']}", values=(uid,))
                        self.file_section_item[uid] = sec_id
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —É–∑–ª–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–ø–æ –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–µ —Å—é–¥–∞ –Ω–µ –ø–æ–ø–∞–¥—ë–º)
            pass

    # ---------- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ----------

    def on_tree_categories_double(self, event=None):
        # –û–ø—Ä–µ–¥–µ–ª–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        item_id = self.tree_categories.focus()
        if not item_id:
            return
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª —Å–µ–∫—Ü–∏–µ–π (—É –Ω–µ–≥–æ –µ—Å—Ç—å values —Å uid)
        values = self.tree_categories.item(item_id, "values")
        if values:
            uid = eval(values[0]) if isinstance(values[0], str) else values[0]
            self._open_section_by_uid(uid)

    def on_tree_files_double(self, event=None):
        item_id = self.tree_files.focus()
        if not item_id:
            return
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–∫—Ü–∏—è (–µ—Å—Ç—å values) ‚Äî –æ—Ç–∫—Ä–æ–µ–º –µ—ë
        values = self.tree_files.item(item_id, "values")
        if values:
            uid = eval(values[0]) if isinstance(values[0], str) else values[0]
            self._open_section_by_uid(uid)
            return
        # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª ‚Äî –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–≤—É—é —Å–µ–∫—Ü–∏—é –∏–∑ –µ–≥–æ –¥–µ—Ç–µ–π
        children = self.tree_files.get_children(item_id)
        for ch in children:
            vals = self.tree_files.item(ch, "values")
            if vals:
                uid = eval(vals[0]) if isinstance(vals[0], str) else vals[0]
                self._open_section_by_uid(uid)
                break

    def on_search(self):
        query = self.entry_search.get().strip()
        if not query:
            return
        best, candidates = search_sections(query, self.sections, self.indexes)
        if not candidates:
            messagebox.showinfo("–ü–æ–∏—Å–∫", "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –ø–µ—Ä–≤—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º "–æ—á–µ–≤–∏–¥–Ω—ã–º",
        # –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å. –ù–æ –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ ‚Äî —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫,
        # –≥–¥–µ –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º (–∫–∞–∫ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å).
        self._show_candidates_dialog(candidates)

    def on_block_selected(self):
        # –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Combobox ‚Äî –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
        if not self.current_section:
            return
        idx = self.cb_blocks.current()
        blocks = self.current_section.get("code_blocks", [])
        code = blocks[idx]["code"] if 0 <= idx < len(blocks) else ""
        self._set_text(self.txt_code, code)

    def on_copy_section(self):
        # –ö–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å markdown-—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
        if not self.current_section:
            return
        copy_to_clipboard(self.root, self.current_section.get("markdown", ""))

    def on_copy_code(self):
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞
        if not self.current_section:
            return
        idx = self.cb_blocks.current()
        blocks = self.current_section.get("code_blocks", [])
        code = blocks[idx]["code"] if 0 <= idx < len(blocks) else ""
        if not code:
            return
        copy_to_clipboard(self.root, code)

    def on_open_md(self):
        # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π .md —Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
        if not self.current_section:
            return
        open_in_system(self.current_section["file_path"])

    def on_locate_in_trees(self):
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –æ–±–∞ –¥–µ—Ä–µ–≤–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
        if not self.current_section:
            return
        uid = (self.current_section["rel_path"], self.current_section["start_line"])
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        item_id = self.cat_section_item.get(uid)
        if item_id:
            # –†–∞—Å–∫—Ä–æ–µ–º –≤—Å–µ—Ö –ø—Ä–µ–¥–∫–æ–≤
            self._expand_to_item(self.tree_categories, item_id)
            self.tree_categories.see(item_id)
            self.tree_categories.selection_set(item_id)
            self.tree_categories.focus(item_id)
        # –§–∞–π–ª—ã
        item_id = self.file_section_item.get(uid)
        if item_id:
            self._expand_to_item(self.tree_files, item_id)
            self.tree_files.see(item_id)
            self.tree_files.selection_set(item_id)
            self.tree_files.focus(item_id)

    def on_back(self):
        # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–∑–∞–¥
        if self.history_pos > 0:
            self.history_pos -= 1
            uid = self.history[self.history_pos]
            self._open_section_by_uid(uid, add_to_history=False)

    def on_forward(self):
        # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –≤–ø–µ—Ä—ë–¥
        if self.history_pos + 1 < len(self.history):
            self.history_pos += 1
            uid = self.history[self.history_pos]
            self._open_section_by_uid(uid, add_to_history=False)

    # ---------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã UI ----------

    def _expand_to_item(self, tree: ttk.Treeview, item_id: str) -> None:
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –≤–∏–¥–∏–º—ã–º
        parent = tree.parent(item_id)
        if parent:
            self._expand_to_item(tree, parent)
            tree.item(parent, open=True)

    def _set_text(self, widget: tk.Text, text: str) -> None:
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ Text (–∫–∞–∫ read-only –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        widget.config(state=tk.NORMAL)
        widget.delete("1.0", tk.END)
        widget.insert("1.0", text)
        widget.config(state=tk.DISABLED)

    def _open_section_by_uid(self, uid: Tuple[str, int], add_to_history: bool = True) -> None:
        # –ù–∞—Ö–æ–¥–∏—Ç —Å–µ–∫—Ü–∏—é –ø–æ uid=(rel_path, start_line) –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ—ë
        rel_path, start_line = uid
        for s in self.sections:
            if s["rel_path"] == rel_path and s["start_line"] == start_line:
                self._display_section(s, add_to_history=add_to_history)
                return

    def _display_section(self, s: Dict, add_to_history: bool = True) -> None:
        self.current_section = s
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å ‚Äî markdown
        self._set_text(self.txt_md, s.get("markdown", ""))
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º
        self.entry_search.delete(0, tk.END)
        self.entry_search.insert(0, s.get("display_key", ""))

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å ‚Äî –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏
        blocks = s.get("code_blocks", [])
        items = []
        for i, b in enumerate(blocks, 1):
            lang = b.get("lang") or "text"
            n_lines = len(b.get("code", "").splitlines())
            items.append(f"[{i}] {lang} ‚Äî {n_lines} —Å—Ç—Ä–æ–∫")
        if not items:
            items = ["‚Äî –Ω–µ—Ç –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ ‚Äî"]
        self.cb_blocks["values"] = items
        self.cb_blocks.current(0)
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∫–æ–¥
        code0 = blocks[0]["code"] if blocks else ""
        self._set_text(self.txt_code, code0)

        # –ò—Å—Ç–æ—Ä–∏—è
        uid = (s["rel_path"], s["start_line"])
        if add_to_history:
            # –ï—Å–ª–∏ –º—ã —É—à–ª–∏ –Ω–∞–∑–∞–¥ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é ‚Äî –æ—Ç—Å–µ—á—ë–º "–≤–ø–µ—Ä—ë–¥"-–≤–µ—Ç–∫—É
            if 0 <= self.history_pos < len(self.history) - 1:
                self.history = self.history[: self.history_pos + 1]
            # –î–æ–±–∞–≤–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ
            if not self.history or self.history[-1] != uid:
                self.history.append(uid)
            self.history_pos = len(self.history) - 1
            self._update_history_buttons()

    def _update_history_buttons(self):
        # –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        self.btn_back.config(state=(tk.NORMAL if self.history_pos > 0 else tk.DISABLED))
        self.btn_fwd.config(state=(tk.NORMAL if self.history_pos + 1 < len(self.history) else tk.DISABLED))

    def _show_candidates_dialog(self, candidates: List[Dict]) -> None:
        """
        –ü—Ä–æ—Å—Ç–æ–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
        –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –û–ö ‚Äî –æ—Ç–∫—Ä—ã—Ç—å.
        """
        win = tk.Toplevel(self.root)
        win.title("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        win.geometry("700x400")
        win.transient(self.root)
        win.grab_set()

        # –°–ø–∏—Å–æ–∫
        frame = ttk.Frame(win, padding=6)
        frame.pack(fill=tk.BOTH, expand=True)

        lb = tk.Listbox(frame)
        lb.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        scroll = ttk.Scrollbar(frame, orient=tk.VERTICAL, command=lb.yview)
        scroll.pack(side=tk.RIGHT, fill=tk.Y)
        lb.configure(yscrollcommand=scroll.set)

        # –ó–∞–ø–æ–ª–Ω–∏–º —Å—Ç—Ä–æ–∫–∞–º–∏ –≤–∏–¥–∞: "¬ß key ‚Äî –ö–∞—Ç1/–ö–∞—Ç2 ‚Äî file.md"
        def fmt(s: Dict) -> str:
            cats = " / ".join(s.get("categories", [])) or "‚Äî"
            return f"{ICON_SECTION}{s['display_key']} ‚Äî {cats} ‚Äî {s['rel_path']}"

        for s in candidates:
            lb.insert(tk.END, fmt(s))

        # –ö–Ω–æ–ø–∫–∏
        bar = ttk.Frame(win, padding=(0, 6, 0, 0))
        bar.pack(fill=tk.X)
        ttk.Button(bar, text="–û–ö", command=lambda: do_open()).pack(side=tk.RIGHT)
        ttk.Button(bar, text="–û—Ç–º–µ–Ω–∞", command=win.destroy).pack(side=tk.RIGHT)

        def do_open():
            sel = lb.curselection()
            if not sel:
                return
            idx = int(sel[0])
            s = candidates[idx]
            self._display_section(s, add_to_history=True)
            win.destroy()

        def on_dbl(_event=None):
            do_open()

        lb.bind("<Double-1>", on_dbl)

        # –í—ã–¥–µ–ª–∏–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if candidates:
            lb.selection_set(0)

# 9) main()

def main():
    # –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: —Å–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ tools/, docs –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
    script_path = Path(__file__).resolve()
    docs_root = script_path.parent.parent / "docs"

    if not docs_root.exists():
        # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Å–µ–¥–Ω—é—é –ø–∞–ø–∫—É 'docs' –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        docs_root = Path.cwd() / "docs"

    # –°–∫–∞–Ω–∏—Ä—É–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    sections, file_map = scan_docs(docs_root)

    # –ó–∞–ø—É—Å–∫–∞–µ–º UI
    root = tk.Tk()
    app = App_UI(root, docs_root, sections, file_map)

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ‚Äî –≤—ã–ø–æ–ª–Ω–∏–º –∞–≤—Ç–æ–ø–æ–∏—Å–∫
    # –ü—Ä–∏–º–µ—Ä: python context_doc.py <–∫–ª—é—á>
    if len(sys.argv) >= 2:
        query = " ".join(sys.argv[1:]).strip()
        if query:
            app.entry_search.delete(0, tk.END)
            app.entry_search.insert(0, query)
            app.on_search()

    root.mainloop()


# 10) –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    main()
