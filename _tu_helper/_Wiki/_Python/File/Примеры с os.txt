================================================
Проверка существования файла:
================================================
import os

if os.path.exists("file.txt"):
    print("File exists")
else:
    print("File does not exist")
В этом примере мы используем функцию os.path.exists() для проверки существования файла "file.txt".
Если файл существует, то мы выводим сообщение "File exists", в противном случае - "File does not exist".

================================================
Проверка типа файла:
================================================
import os

if os.path.isfile("file.txt"):
    print("File exists")
else:
    print("File is not a regular file")
В этом примере мы используем функцию os.path.isfile() для проверки того, что "file.txt" является обычным файлом.
Если файл существует и является обычным файлом, то мы выводим сообщение "File exists", в противном случае - "File is not a regular file".

================================================
Проверка доступности файла для чтения:
================================================
import os

if os.access("file.txt", os.R_OK):
    print("File is readable")
else:
    print("File is not readable")
В этом примере мы используем функцию os.access() для проверки доступности файла "file.txt" для чтения.
 Если файл доступен для чтения, то мы выводим сообщение "File is readable", в противном случае - "File is not readable".

================================================
Проверка наличия директории:
================================================
import os

if os.path.isdir("directory"):
    print("Directory exists")
else:
    print("Directory does not exist")
В этом примере мы используем функцию os.path.isdir() для проверки наличия директории "directory".
Если директория существует, то мы выводим сообщение "Directory exists", в противном случае - "Directory does not exist".


================================================
Поиск файла в каждой поддиректории -  рекурсивную os.walk()
================================================
import os

def find_file(name, path):
    for root, dirs, files in os.walk(path):
        if name in files:
            return os.path.join(root, name)
    return None
Эта функция принимает два аргумента: name - имя файла, которое мы ищем, и path - путь к директории, в которой мы начинаем поиск.
Функция использует функцию os.walk() для рекурсивного обхода всех поддиректорий, начиная с указанного пути path.
В каждой директории функция проверяет наличие файла с именем name в списке файлов (files) этой директории.
Если файл найден, то функция возвращает полный путь к этому файлу, используя функцию os.path.join().
Если файл не найден, то функция возвращает None.

Пример использования функции для поиска файла с именем "example.txt" в директории "C:\Test":

result = find_file("example.txt", r"C:\Test")
if result is None:
    print("File not found")
else:
    print("File found at: " + result)
Здесь мы вызываем функцию find_file() с именем файла "example.txt" и путем к директории "C:\Test". Если файл не найден, то мы выводим сообщение "File not found". Если файл найден, то мы выводим сообщение "File found at:" и полный путь к файлу. Обратите внимание, что мы используем префикс r перед путем к директории, чтобы указать Python, что это строка сырого текста, чтобы избежать проблем с экранированием символов.

================================================
Чтобы получить директорию, в которой находится файл,  os.path.dirname().
================================================
import os

file_path = "/home/user/Documents/example.txt"
dir_path = os.path.dirname(file_path)
print(dir_path)

Обратите внимание, что os.path.dirname() возвращает путь к директории, даже если файла по указанному пути не существует.

