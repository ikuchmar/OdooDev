<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="field_basic_form" model="ir.ui.view">
        <field name="name">field.basic.view.form</field>
        <field name="model">_tu_helper.field.basic</field>
        <field name="arch" type="xml">
            <search>
<!--                        <field name="field_boolean"/>-->
<!--                        <field name="field_char"/>-->
<!--                        <field name="field_float"/>-->
                <field name="field_integer"/>
                <filter name="field_integer" string="integer1=2"  domain="[('field_integer', '=',2)]"/>
                <filter name="field_integer" string="integer1>2"  domain="[('field_integer', '>',2)]"/>
                <filter name="field_integer" string="integer1!=2"  domain="[('field_integer', '!=',2)]"/>
                <filter name="field_integer" string="integer1>=2"  domain="[('field_integer', '>=',2)]"/>
<!--                <filter name="field_integer" string="integer1<=2"  domain="[('field_integer', '<=',2)]"/>-->

<!--&lt;!&ndash;                <filter name="field_integer" string="Field integer less than or equal to"  domain="[('field_integer', '<=',2)]"/>&ndash;&gt;-->
<!--&lt;!&ndash;                <filter name="field_integer" string="Field integer unset or equals to "  domain="[('field_integer', '=?',2)]"/>&ndash;&gt;-->
<!--&lt;!&ndash;                <filter name="field_integer" string="Field integer like"  domain="[('field_integer', 'like',2)]"/>&ndash;&gt;-->
<!--&lt;!&ndash;                <filter name="field_integer" string="Field integer not like"  domain="[('field_integer', 'not like',2)]"/>&ndash;&gt;-->
<!--                <filter name="field_integer" string="Field integer ilike"  domain="[('field_integer', 'ilike',2)]"/>-->
<!--                <filter name="field_integer" string="Field integer not ilike"  domain="[('field_integer', 'not ilike',2)]"/>-->
<!--                <filter name="field_integer" string="Field integer is equal"  domain="[('field_integer', 'in',2)]"/>-->
<!--                <filter name="field_integer" string="Field integer is unequal"  domain="[('field_integer', 'not in',2)]"/>-->
<!--                <filter name="field_integer" string="Field integer parent_of"  domain="[('field_integer', 'is a parent',2)]"/>-->
<!--                <filter name="field_integer" string="Field integer variable type"  domain="[('field_integer', 'value',2)]"/>-->
<!--                <filter name="field_float" string="Field float"  domain="[('field_float', '>','2.0')]"/>-->
<!--                <filter name="field_boolean" string="Field boolean"  domain="[('field_boolean', '=',True)]"/>-->
            </search>
        </field>
    </record>
</odoo>

<!--================================================================================================================-->
<!--Список всех операторов описан здесь:-->
<!--https://www.odoo.com/uk_UA/forum/dopomoga-1/v8-what-is-the-full-list-of-available-term-operators-in-the-expression-domain-75580 -->

<!--List of Domain operators: ! (Not), | (Or), & (And)-->
<!--List of Term operators: '=', '!=', '<=', '<', '>', '>=', '=?', '=like', '=ilike', 'like', 'not like', 'ilike', 'not ilike', 'in', 'not in', 'child_of'-->
<!--Usage:-->
<!--Input records:-->
<!--Record 1: Openerp-->
<!--Record 2: openerp-->
<!--Record 3: Opensource-->
<!--Record 4: opensource-->
<!--Record 5: Open-->
<!--Record 6: open-->
<!--Record 7: Odoo-->
<!--Record 8: odoo-->
<!--Record 9: Odooopenerp-->
<!--Record 10: OdooOpenerp-->
<!--'like': [('input', 'like', 'open')] - Returns case sensitive (wildcards - '%open%') search. O/p: open, opensource, openerp, Odooopenerp-->
<!--'not like': [('input', 'not like', 'open')] - Returns results not matched with case sensitive (wildcards - '%open%') search. O/p: Openerp, Opensource, Open, Odoo, odoo, OdooOpenerp-->
<!--'=like': [('name', '=like', 'open')] - Returns exact (= 'open') case sensitive search. O/p: open-->
<!--'ilike': [('name', 'ilike', 'open')] - Returns exact case insensitive (wildcards - '%open%') search. O/p: Openerp, openerp, Opensource, opensource, Open, open, Odooopenerp, OdooOpenerp-->
<!--'not ilike': [('name', 'not ilike', 'open')] - Returns results not matched with exact case insensitive (wildcards - '%open%') search. O/p: Odoo, odoo-->
<!--'=ilike': [('name', '=ilike', 'open')] - Returns exact (= 'open' or 'Open') case insensitive search. O/p: Open, open-->
<!--'=?':-->
<!--name = 'odoo'-->
<!--parent_id = False-->
<!--[('name', 'like', name), ('parent_id', '=?', parent_id)] - Returns name domain result & True-->
<!--name = 'odoo'-->
<!--parent_id = 'openerp'-->
<!--[('name', 'like', name), ('parent_id', '=?', parent_id)] - Returns name domain result & parent_id domain result-->
<!--'=?' is a short-circuit that makes the term TRUE if right is None or False, '=?' behaves like '=' in other cases-->
<!--'in':-->
<!--[('value1', 'in', ['value1', 'value2'])] - in operator will check the value1 is present or not in list of right term-->
<!--'not in':-->
<!--[('value1', 'not in', ['value2'])] - not in operator will check the value1 is not present in list of right term-->
<!--While these 'in' and 'not in' works with list/tuple of values, the latter '=' and '!=' works with string-->
<!--'=':-->
<!--value = 10-->
<!--[('value','=',value)] - term left side has 10 in db and term right our value 10 will match-->
<!--'!=':-->
<!--value = 15-->
<!--[('value','!=',value)] - term left side has 10 in db and term right our value 10 will not match-->
<!--'child_of':-->
<!--parent_id = '1' #Agrolait-->
<!--'child_of':-->
<!--[('partner_id', 'child_of', parent_id)] - return left and right list of partner_id for given parent_id-->
<!--'<=', '<', '>', '>=':-->
<!--These operators are largely used in openerp for comparing dates - [('date', '>=', date_begin), ('date', '<=', date_end)]. -->
<!--You can use these operators to compare int or float also.-->

