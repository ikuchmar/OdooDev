Оновлення полів Many2many та One2many (x2many).
в поле передається список команд, які являють собою кортежі, в яких прописані дії та параметри оновлення

'event_type_ticket_ids': [(5, 0), (0, 0, {'name': 'TestRegistration'})]

'value_ids': [(6, 0, [att_size_big.id, att_size_medium.id])]

Важливо! x2many можна оновлювати лише в такий спосіб.

В кортежі перший параметр визначає команда, значення двох інших залежать від команди.

Важливо! Кортежі команд можна комбінувати у списку, вони будуть виконуватись одни за одною.

'value_ids': [(5, 0, 0), (0, 0, {'name': 'Service on demand',}), ]

==========================================
x2many commands
==========================================

CREATE = 0
UPDATE = 1
DELETE = 2
UNLINK = 3
LINK = 4
CLEAR = 5
SET = 6

==========================================
create
==========================================
Кортеж виглядає (0, 0, values)
Другий параметр ігнорується, третій являє собою словник значень, як при створенні запису.

'operation_ids': [
   (0, 0, {'name': 'Cutting Machine',  'time_cycle': 12,
             'workcenter_id': self.workcenter_1.id,  'sequence': 1}),
   (0, 0, {'name': 'Weld Machine',  'time_cycle': 18,
             'workcenter_id': self.workcenter_1.id,  'sequence': 2}), ]

==========================================
update
==========================================
Кортеж виглядає (1, id, values)
В другому параметры передається id запису що пов’язаний, третій словник значень, що будуть оновлені. Якщо перший команда створює нові записи, ця оновлює.

'attribute_line_ids': [(1, template.attribute_line_ids[0].id, {
   'attribute_id': pa_color.id,
   'value_ids': [(4, pav_color_black.id, False)], })]

==========================================
delete
==========================================
Кортеж виглядає (2, id, 0)
В другому параметрі передається id запису, що видаляється, третій ігнорується.
Важливо, запис саме видаляється, якщо у зв’язку Many2many на нього є посилання може виникнути помилка у разі ondelete='restrict'.

company.write({
   'country_id': country2.id,
   'child_ids': [(2, child_company.id)], })

==========================================
unlink
==========================================
Кортеж виглядає (3, id, 0)
В другому параметрі передається id запису, що від’єднується, третій ігнорується.

{'users': [(3, user.id) for user in group_user.users]}

Видаляє запис з таблиці зв'язку. Для One2many, де зворотнє поле має ondelete='cascade' запис буде видалений.

==========================================
link
==========================================
Кортеж виглядає (4, id, 0)
В другому параметрі передається id запису, що приєднується, третій ігнорується.
Створює запис в таблиці зв’язку.

{'groups_id': [(4, group.id, False) for group in all_groups]}

==========================================
clear
==========================================
Кортеж виглядає (5, 0, 0)
Другий і третій параметри ігноруються.
Видаляє усі зв’язки. Працює так, якби застосувати unlink до усіх пов’язаних записів.

self.warehouse_ids = [(5, 0, 0)]

==========================================
set
==========================================
Кортеж виглядає (6, 0, ids)
Другий параметр ігнорується, третій це список (це важливо, саме список) id записів.
Замінює поточний список зв’язків на переданий. Так якби очистити зв’язок і створити нові.

Важливо! Навіть якщо треба передати один id, все одно треба передавати список (список з одного елементу).

values['sale_line_ids'] = [(6, None, self.sale_line_ids.ids)]

==========================================
==========================================
@api.onchange('doctor_id')
    def onchange_doctor_id(self):
        for rec in self:
            lines = []

            vals = {
                'date': date.today(),
                'patient_id': rec.id,
                'doctor_id': rec.personal_doctor_id
            }
        lines.append((0, 0, vals))
        rec.personal_doctor_history_ids = lines

==========================================
Запись в поле м2м
==========================================
    def action_set_personal_doctor(self):
        self.ensure_one()
        self.patient_ids.write({"personal_doctor_id": self.doctor_id.id})

