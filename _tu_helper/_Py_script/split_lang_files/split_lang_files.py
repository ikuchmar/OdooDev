#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–æ–π —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É –ø—É—Ç–∏ (—Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞),
–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞—ë—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–∏—ë–º–Ω–∏–∫–∞ —Ç—Ä–∏ —Ñ–∞–π–ª–∞:
<–∏–º—è>_en<—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ>, <–∏–º—è>_ru<—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ> –∏ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ "–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞")
<–∏–º—è>_di<—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ>.

–õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫:
- –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã (–¥–∏–∞–ø–∞–∑–æ–Ω U+0400..U+04FF),
  —Å—Ç—Ä–æ–∫–∞ –∏–¥—ë—Ç –≤ "—Ä—É—Å—Å–∫–∏–π" —Ñ–∞–π–ª (_ru).
- –ò–Ω–∞—á–µ ‚Äî –≤ "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π" —Ñ–∞–π–ª (_en).
- –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –æ–±–∞ —Ñ–∞–π–ª–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑—Ä—ã–≤—ã).
- –ë–ª–æ–∫ "–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞" (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç—ã "–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞" –∏ "üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞")
  –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _di.
  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ –ù–ï –ø–æ–ø–∞–¥–∞–µ—Ç –≤ _en/_ru.

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
- –í–æ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö —É–¥–∞–ª—è—é—Ç—Å—è –≤–µ–¥—É—â–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞).
- –ö–æ–Ω—Ñ–∏–≥ —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ config.json (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏).
- –õ—é–±—ã–µ –∫–ª—é—á–∏ –∫–æ–Ω—Ñ–∏–≥–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '_' ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
"""

import os
import sys
import json
import re
from pathlib import Path
from typing import Dict, Any, Iterable, Tuple, Optional, List

# ===============================
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
# ===============================

# –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
RE_CYRILLIC = re.compile(r"[\u0400-\u04FF]")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ "–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞" (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å —ç–º–æ–¥–∑–∏ –∏ –±–µ–∑, —Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω)
RE_DICT_HEADER = re.compile(
    r"^\s*(?:üÜï\s*)?(?:–ù–æ–≤—ã–µ\s+—Å–ª–æ–≤–∞|New\s+words)\s*:?\s*$",
    re.IGNORECASE
)

# –ò–º—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CONFIG_NAME = "config.json"


# ===============================
# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ===============================

def load_config(config_path: Optional[str]) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON-—Ñ–∞–π–ª–∞.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ª—é–±—ã–µ –∫–ª—é—á–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '_' (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π.
    """
    if config_path is None:
        config_path = DEFAULT_CONFIG_NAME

    cfg_file = Path(config_path)
    if not cfg_file.exists():
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {cfg_file.resolve()}")

    with cfg_file.open("r", encoding="utf-8") as f:
        raw = json.load(f)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª—é—á–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "_"
    cleaned = {k: v for k, v in raw.items() if not str(k).startswith("_")}

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    cfg = {
        "source_path": cleaned.get("source_path", "").strip(),
        "dest_root": cleaned.get("dest_root", "").strip(),
        "extensions": cleaned.get("extensions", []),
        "encoding": cleaned.get("encoding", "utf-8"),
        "preserve_structure": bool(cleaned.get("preserve_structure", True)),
        "overwrite": bool(cleaned.get("overwrite", True)),
        "dry_run": bool(cleaned.get("dry_run", False)),
    }

    if not cfg["source_path"]:
        raise ValueError("–í –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ —É–∫–∞–∑–∞–Ω 'source_path'.")
    if not cfg["dest_root"]:
        raise ValueError("–í –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ —É–∫–∞–∑–∞–Ω 'dest_root'.")

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    exts = cfg["extensions"]
    if isinstance(exts, list):
        norm_exts = []
        for e in exts:
            if not e:
                continue
            e = str(e).strip().lower()
            if not e:
                continue
            if not e.startswith("."):
                e = "." + e
            norm_exts.append(e)
        cfg["extensions"] = norm_exts
    else:
        # –ï—Å–ª–∏ extensions –Ω–µ —Å–ø–∏—Å–æ–∫ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä
        cfg["extensions"] = []

    return cfg


def is_text_file_selected(path: Path, extensions: Iterable[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ñ–∞–π–ª –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π.
    –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ extensions –ø—É—Å—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–¥—Ö–æ–¥—è—Ç –≤—Å–µ —Ñ–∞–π–ª—ã.
    """
    if not path.is_file():
        return False
    if not extensions:
        return True
    return path.suffix.lower() in set(extensions)


def iter_source_files(source_path: Path, extensions: Iterable[str]) -> Iterable[Path]:
    """
    –ò—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª, —Ç–∞–∫ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –ø–æ –ø–∞–ø–∫–µ.
    """
    if source_path.is_file():
        if is_text_file_selected(source_path, extensions):
            yield source_path
        return

    if source_path.is_dir():
        for p in source_path.rglob("*"):
            if is_text_file_selected(p, extensions):
                yield p
        return

    raise FileNotFoundError(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_path}")


def classify_line(line: str) -> str:
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–∏—Ä–∏–ª–ª–∏—Ü—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'ru' –µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –≤—ã—è–≤–ª–µ–Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –∏–Ω–∞—á–µ 'en'.
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –≤ –æ–±–∞ —Ñ–∞–π–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, —Å–Ω–∞—Ä—É–∂–∏.
    """
    return "ru" if RE_CYRILLIC.search(line) else "en"


def build_output_paths(src_file: Path, cfg: Dict[str, Any], source_root: Optional[Path]) -> Tuple[Path, Path, Path]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—É—Ç–∏ –ø—Ä–∏—ë–º–Ω–∏–∫–æ–≤ –¥–ª—è —Ç—Ä—ë—Ö —Ñ–∞–π–ª–æ–≤ (_en, _ru, _di).

    –ï—Å–ª–∏ preserve_structure=True –∏ source_root –∑–∞–¥–∞–Ω:
      - –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å src_file –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ source_root
      - –°–æ–∑–¥–∞—ë–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ dest_root

    –ï—Å–ª–∏ source_root –Ω–µ –∑–∞–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äî –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª), —Ç–æ —Ñ–∞–π–ª—ã
    —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä—è–º–æ –≤ dest_root.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (path_en, path_ru, path_di).
    """
    dest_root = Path(cfg["dest_root"])
    preserve = cfg["preserve_structure"]

    # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ —Å–∞–º–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    stem = src_file.stem
    suffix = src_file.suffix  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ –∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ

    # –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    if preserve and source_root and src_file.is_relative_to(source_root):
        rel = src_file.relative_to(source_root).parent  # –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
        target_dir = dest_root / rel
    else:
        target_dir = dest_root

    # –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–∏—ë–º–Ω–∏–∫–∞–º
    out_en = target_dir / f"{stem}_en{suffix}"
    out_ru = target_dir / f"{stem}_ru{suffix}"
    out_di = target_dir / f"{stem}_di{suffix}"
    return out_en, out_ru, out_di


def ensure_parent_dir(path: Path, dry_run: bool) -> None:
    """
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    """
    parent = path.parent
    if not parent.exists():
        if dry_run:
            print(f"[DRY-RUN] –°–æ–∑–¥–∞–ª –±—ã –ø–∞–ø–∫—É: {parent}")
        else:
            parent.mkdir(parents=True, exist_ok=True)


def strip_leading_blank_lines(lines: List[str]) -> List[str]:
    """
    –£–¥–∞–ª—è–µ—Ç –≤–µ–¥—É—â–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞).
    –ü—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å—á–∏—Ç–∞–µ–º —Ç—É, —É –∫–æ—Ç–æ—Ä–æ–π line.strip() == ''.
    """
    i = 0
    n = len(lines)
    while i < n and not lines[i].strip():
        i += 1
    return lines[i:]


def split_content_into_buckets(lines: Iterable[str]) -> Tuple[List[str], List[str], List[str]]:
    """
    –†–∞–∑–Ω–æ—Å–∏—Ç –≤—Ö–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ —Ç—Ä—ë–º –∫–æ—Ä–∑–∏–Ω–∞–º: EN, RU –∏ DI (—Å–ª–æ–≤–∞—Ä—å).
    - –ö–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ "–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞" ‚Äî –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
      –ø–∏—à–µ–º —Ç–æ–ª—å–∫–æ –≤ DI (–¥–æ –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞).
    - –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥—É–±–ª–∏—Ä—É–µ–º –≤ EN –∏ RU.
    - –í –∫–æ–Ω—Ü–µ —É–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–π –∫–æ—Ä–∑–∏–Ω—ã.
    """
    en_lines: List[str] = []
    ru_lines: List[str] = []
    di_lines: List[str] = []

    in_dict_block = False

    for line in lines:
        # –ï—Å–ª–∏ —É–∂–µ –ø–æ–ø–∞–ª–∏ –≤ –±–ª–æ–∫ —Å–ª–æ–≤–∞—Ä—è ‚Äî –≤—Å—ë —É—Ö–æ–¥–∏—Ç –≤ DI, –±–µ–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if in_dict_block:
            di_lines.append(line)
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–æ–≤–∞—Ä—è
        if RE_DICT_HEADER.match(line):
            in_dict_block = True
            di_lines.append(line)
            continue

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
        if not line.strip():
            # –ü—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥—É–±–ª–∏—Ä—É–µ–º –≤ –æ–±–∞ —Ñ–∞–π–ª–∞
            en_lines.append(line)
            ru_lines.append(line)
            continue

        lang = classify_line(line)
        if lang == "ru":
            ru_lines.append(line)
        else:
            en_lines.append(line)

    # –£–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ—Ä–∑–∏–Ω
    en_lines = strip_leading_blank_lines(en_lines)
    ru_lines = strip_leading_blank_lines(ru_lines)
    di_lines = strip_leading_blank_lines(di_lines)

    return en_lines, ru_lines, di_lines


def write_if_needed(path: Path, content_lines: List[str], encoding: str, overwrite: bool, dry_run: bool) -> None:
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –ø–∏—Å–∞—Ç—å.
    –°–æ–±–ª—é–¥–∞–µ—Ç —Ñ–ª–∞–≥–∏ overwrite/dry_run. –°–æ–∑–¥–∞—ë—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞–ø–∫–∏.
    """
    if not content_lines:
        # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ‚Äî –Ω–µ—á–µ–≥–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
        return

    if not overwrite and path.exists():
        print(f"[SKIP] –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (overwrite=False): {path}")
        return

    ensure_parent_dir(path, dry_run)

    if dry_run:
        print(f"[DRY-RUN] –°–æ–∑–¥–∞–ª –±—ã —Ñ–∞–π–ª: {path} (—Å—Ç—Ä–æ–∫: {len(content_lines)})")
        return

    with path.open("w", encoding=encoding, newline="") as f:
        f.writelines(content_lines)


def split_file_by_language(src_file: Path, out_en: Path, out_ru: Path, out_di: Path, encoding: str,
                           overwrite: bool, dry_run: bool) -> None:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src_file –Ω–∞ —Ç—Ä–∏ –∫–æ—Ä–∑–∏–Ω—ã (EN, RU, DI) –∏ –ø–∏—à–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã.
    DI-—Ñ–∞–π–ª —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –Ω–µ –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–∞—á–∞–ª–∞.
    """
    print(f"[PROCESS] {src_file} ->")
    print(f"          EN: {out_en}")
    print(f"          RU: {out_ru}")
    print(f"          DI: {out_di} (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–ª–æ–∫–∞ '–ù–æ–≤—ã–µ —Å–ª–æ–≤–∞')")

    if dry_run:
        # –í —Ä–µ–∂–∏–º–µ dry-run —á–∏—Ç–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        with src_file.open("r", encoding=encoding, errors="replace") as fin:
            en_lines, ru_lines, di_lines = split_content_into_buckets(fin.readlines())
        if en_lines:
            print(f"[DRY-RUN]  -> EN: {len(en_lines)} —Å—Ç—Ä–æ–∫(–∏)")
        if ru_lines:
            print(f"[DRY-RUN]  -> RU: {len(ru_lines)} —Å—Ç—Ä–æ–∫(–∏)")
        if di_lines:
            print(f"[DRY-RUN]  -> DI: {len(di_lines)} —Å—Ç—Ä–æ–∫(–∏)")
        return

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: —á–∏—Ç–∞–µ–º –∏ –ø–∏—à–µ–º –∫–æ—Ä–∑–∏–Ω—ã
    with src_file.open("r", encoding=encoding, errors="replace") as fin:
        en_lines, ru_lines, di_lines = split_content_into_buckets(fin.readlines())

    # –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç)
    write_if_needed(out_en, en_lines, encoding, overwrite, dry_run=False)
    write_if_needed(out_ru, ru_lines, encoding, overwrite, dry_run=False)
    write_if_needed(out_di, di_lines, encoding, overwrite, dry_run=False)


def main(argv: Optional[Iterable[str]] = None) -> int:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞:
    - –ß–∏—Ç–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ (–ø—É—Ç—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏,
      –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è config.json –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ).
    - –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
    - –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–∑–¥–∞—ë—Ç –ø–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã _en/_ru –∏, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–ª–æ–∫–∞ —Å–ª–æ–≤–∞—Ä—è, _di.
    """
    argv = list(argv or sys.argv[1:])
    config_path = argv[0] if argv else None

    try:
        cfg = load_config(config_path)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return 1

    source_path = Path(cfg["source_path"]).resolve()
    dest_root = Path(cfg["dest_root"]).resolve()
    extensions = cfg["extensions"]
    encoding = cfg["encoding"]
    preserve_structure = cfg["preserve_structure"]
    overwrite = cfg["overwrite"]
    dry_run = cfg["dry_run"]

    print("[INFO] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  source_path       : {source_path}")
    print(f"  dest_root         : {dest_root}")
    print(f"  extensions        : {extensions if extensions else '(–≤—Å–µ —Ñ–∞–π–ª—ã)'}")
    print(f"  encoding          : {encoding}")
    print(f"  preserve_structure: {preserve_structure}")
    print(f"  overwrite         : {overwrite}")
    print(f"  dry_run           : {dry_run}")
    print()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π (–Ω—É–∂–µ–Ω –¥–ª—è –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
    source_root: Optional[Path] = None
    if source_path.is_dir():
        source_root = source_path

    try:
        files = list(iter_source_files(source_path, extensions))
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
        return 1

    if not files:
        print("[WARN] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.")
        return 0

    # –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–∏—ë–º–Ω–∏–∫–∞ (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
    if not dry_run:
        dest_root.mkdir(parents=True, exist_ok=True)
    else:
        print(f"[DRY-RUN] –°–æ–∑–¥–∞–ª –±—ã (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –ø–∞–ø–∫—É –ø—Ä–∏—ë–º–Ω–∏–∫–∞: {dest_root}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    total = 0
    for src in files:
        out_en, out_ru, out_di = build_output_paths(src, cfg, source_root)
        try:
            split_file_by_language(src, out_en, out_ru, out_di, encoding, overwrite, dry_run)
            total += 1
        except Exception as e:
            print(f"[ERROR] {src}: {e}")

    print(f"\n[DONE] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
