Есть один «мастер-скрипт» (запускается без аргументов) и рядом один файл master_config.toml.
Мастер-скрипт последовательно выполняет шаги, описанные в конфиге. В шагах мы:

меняем значения параметров в указанных подчинённых *.toml файлах (по относительным путям от папки мастера);

запускаем указанные скрипты (тоже по относительным путям);

порядок жёстко фиксирован — идём сверху вниз.

Как настраивается замена параметров

В master_config.toml есть блок [globals] — набор «глобальных параметров», которые можно массово прокидывать в разные подчинённые конфиги.

В каждом шаге типа set_params можно:

просто применить глобальные параметры;

и/или задать локальные для этого шага переопределения (например, step_params), которые имеют высший приоритет.

при необходимости ограничить список ключей, которые применять (only_keys).

Итоговое значение для каждого ключа берётся по приоритету:
step_params → globals (если ключ не задан на уровне шага — берём из глобальных; если нет и там — не трогаем).

Если в целевом подчинённом *.toml ключ есть — заменяем значение. Если нет — не падаем, просто логируем предупреждение и идём дальше.

Типы значений поддерживаются базовые: строки, числа, булевы, списки. Если тип в цели не совпадает — предупреждение и пропуск.

Мы не создаём новые ключи, меняем только существующие (по вашему требованию «если не нашли — идём дальше»). Это безопаснее.

Где лежат файлы и как указываем пути

Директория мастера, например: /_make_video/_master_run/.

Все относительные пути в конфиге интерпретируются от этой папки.

Примеры:

целевой конфиг: 0_split_lesson_file/config.toml → реальный путь /_make_video/0_split_lesson_file/config.toml

скрипт: 0_split_lesson_file/split_lesson_file.py

Последовательность действий в одном конфиге

В [[steps]] перечислены шаги; тип шага:

set_params — изменить параметры в одном/нескольких целевых *.toml;

run_script — запустить указанный скрипт;

(опционально) комбинированный set_params_and_run — сначала применить параметры в указанных целях, затем запустить скрипт (чтобы не плодить два шага подряд, если вам удобно).

Поведение и надёжность

dry_run: показываем, что сделали бы (какие ключи/значения поменялись бы, какие скрипты запустились бы), но ничего не меняем и не запускаем.

continue_on_error: если true, при ошибке на шаге логируем и продолжаем; если false — останавливаемся.

backup_configs: перед записью делаем *.bak.

Запись конфигов — атомарная (через временный файл и замену), кодировка UTF-8.

Логи: понятные сообщения — какой файл правим, какие ключи нашли/не нашли, что заменили, что запускали и каков код выхода.

Пример структуры и конфига
/_make_video/
  /_master_run/
    master_run.py
    master_config.toml
  /0_split_lesson_file/
    split_lesson_file.py
    config.toml
  /1_make_audio_tts_from_text/
    tts_batch_reader.py
    config.toml
  /2_image_text_overlay/
    image_text_overlay.py
    config.toml


Пример master_config.toml:

[globals]
input_dirs = ["D:/Entertaiment/Английский/data/Урок 4"]
language = "en"
delete_source_images_after = false

[options]
dry_run = false
continue_on_error = false
backup_configs = true
python_executable = ""   # если пусто — используем текущий интерпретатор

# 1) Применяем только input_dirs к нескольким конфигам
[[steps]]
type = "set_params"
targets = [
  "0_split_lesson_file/config.toml",
  "1_make_audio_tts_from_text/config.toml",
  "2_image_text_overlay/config.toml"
]
only_keys = ["input_dirs"]

# 2) Запускаем первый скрипт
[[steps]]
type = "run_script"
script = "0_split_lesson_file/split_lesson_file.py"

# 3) Применяем язык к TTS; при этом на уровне шага переопределяем язык
[[steps]]
type = "set_params"
targets = ["1_make_audio_tts_from_text/config.toml"]
only_keys = ["language"]
# Локальные переопределения именно для этого шага:
[steps.step_params]
language = "en-GB"  # имеет приоритет над [globals].language

# 4) Запускаем TTS
[[steps]]
type = "run_script"
script = "1_make_audio_tts_from_text/tts_batch_reader.py"

# 5) В этом шаге одновременно: подменить один ключ и запустить скрипт
[[steps]]
type = "set_params_and_run"
targets = ["2_image_text_overlay/config.toml"]
only_keys = ["delete_source_images_after"]
# Переопределение для шага:
[steps.step_params]
delete_source_images_after = true

# Скрипт, который запускаем после замены:
[steps.run]
script = "2_image_text_overlay/image_text_overlay.py"
args = []  # мастер запускается без аргументов; поле оставлено на будущее

Итого

У вас один мастер-скрипт, один мастер-конфиг.

В конфиге задаёте:

глобальные параметры (можно массово прокидывать);

последовательность шагов;

переопределения параметров на уровне каждого шага (приоритетнее глобальных).

Мастер безопасно меняет только существующие ключи в целевых *.toml, логирует «ключ не найден» и идёт дальше.

Запускает подчинённые скрипты в нужном порядке.

Есть dry_run, бэкапы, продолжение при ошибках, атомарная запись, детальные логи.