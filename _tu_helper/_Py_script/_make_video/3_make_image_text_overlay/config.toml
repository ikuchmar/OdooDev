# === Общие параметры входа/выхода ===
# Список папок для обхода (рекурсивно, если recursive=true)
input_dirs = ['D:/Entertaiment/Английский/data/Урок 4']

#input_dirs = ["./input"]

# Явный список TXT-файлов (если нужно точечно)
input_files = []

# Рекурсивный обход папок
recursive = true

# Расширения изображений, подходящих для наложения текста
image_extensions = [".jpg", ".jpeg", ".png", ".webp"]

# Кодировка текстовых файлов
text_encoding = "utf-8"


# === Фильтрация маркеров в тексте ===
# Любые вхождения строк из списка remove_markers будут удалены из текста.
# Если после удаления строка станет пустой — её поведение определяется include_empty_lines.
# ВАЖНО: каждый маркер — отдельный элемент массива (НЕ пишите "(ru), (v:ryan)" в одном элементе).
remove_markers = ["[SKIP]", "[NO-TEXT]", "#hide", "<skip>", "(en)", "(ru)", "(v:ryan)"]

# Если true — строки, содержащие ЛЮБОЙ маркер, удаляются целиком (а не только маркер внутри).
drop_lines_with_markers = false


# === Как распределять текст по найденным картинкам ===
# "full_text"          — каждая выбранная картинка получает ВЕСЬ текст.
# "line_by_line_cycle" — текст режется на строки/блоки строк и раздаётся по картинкам циклично.
per_image_text_mode = "line_by_line_cycle"

# Включать ли пустые строки при раздаче по картинкам (имеет смысл для line_by_line_cycle)
include_empty_lines = false

# Сколько строк назначать на одну картинку (только для line_by_line_cycle):
# 1  — по одной строке на картинку;
# 2+ — блок из N строк на картинку.
lines_per_image = 1


# === Какие картинки обрабатывать ===
# "all"   — обрабатывать все найденные картинки,
# "first" — использовать только ПЕРВУЮ подходящую картинку (полезно, если хотим «весь текст в одну»).
target_images = "all"


# === Поиск картинок для текста ===
# "exact"  — искать только картины с точно таким же именем, как у текста (promo.txt → promo.jpg/png/webp)
# "prefix" — искать все картинки, имя которых НАЧИНАЕТСЯ с имени текста (promo_1.jpg, promo-final.png, и т.п.)
image_match_mode = "prefix"


# === Куда и как сохранять результат ===
# Куда сохранять результат: "" — рядом с исходником; иначе — в указанную папку (будет создана)
output_dir = ""
#output_dir = "./output"

# Схема имени выходного файла:
# "suffix"         — имя + output_suffix (без перезаписи исходника)
# "overwrite"      — перезаписывать исходник
# "skip_if_exists" — пропускать, если выходной уже существует
# РЕКОМЕНДАЦИЯ: при циклической индексации используйте "suffix".
output_naming = "suffix"

# Суффикс для режима "suffix" ("" допустимо; используйте вместе с cycle_output_indexing для photo1.jpg, photo2.jpg, ...)
output_suffix = "_"

# Принудительный формат сохранения: "" = как у исходника; либо "JPEG"/"PNG"/"WEBP"
save_format = ""

# Качество (где применимо)
jpeg_quality = 90
webp_quality = 90


# === Индексация при циклической раздаче строк ===
# Когда одна и та же картинка используется несколько раз (например, строк больше, чем картинок),
# включите индексацию, чтобы не перезаписывать файл, а создавать image_1, image_2, ...
cycle_output_indexing = true
cycle_index_start = 1         # начало нумерации
cycle_index_pad = 0           # 0 = без ведущих нулей; 2 → 01, 02, ...
# Плейсхолдеры: {stem} — имя без расширения; {i} — индекс; {suffix} — output_suffix (если naming="suffix"); {ext} — расширение с "."
cycle_index_name_template = "{stem}{suffix}{i}{ext}"


# === Удаление исходной картинки после успешного сохранения ===
# Если true — после успешного сохранения результата исходная картинка удаляется.
# Защита: не удаляем при dry_run=true и если итоговый путь совпадает с исходным (overwrite).
delete_original_after_success = true


# === Наложение текста ===
# Путь к TTF/OTF-шрифту (обязателен!)
font_path = "C:/Windows/Fonts/arial.ttf"

# Размер шрифта: число или "auto"
font_size = "auto"

# Минимальный размер шрифта при автоподборе
min_font_size = 14

# Цвет текста
color = "#FFFFFF"

# Стиль читабельности (фон/контур):
#  - "none"   — без улучшений
#  - "stroke" — контур
#  - "box"    — полупрозрачная подложка
#  - "both"   — и подложка, и контур
readability_style = "none"

# Контур текста (для "stroke" и "both")
stroke_width = 2
stroke_fill = "#000000"

# Подложка под текст (для "box" и "both"), RGBA #RRGGBBAA
# background_box_fill = "#00000080"  # чёрный, 50% непрозрачность
background_box_fill = "#00000040"    # чёрный, ~25%

# Выравнивание строк: "left" | "center" | "right"
align = "center"

# Позиция текста (якорь):
# "top_left","top_center","top_right",
# "center_left","center","center_right",
# "bottom_left","bottom_center","bottom_right"
anchor = "center"

# Отступы от краёв (пиксели)
margin_x = 32
margin_y = 32

# Максимальная ширина/высота области под текст (в долях от размеров изображения)
max_width_pct = 0.90
max_height_pct = 0.90

# Межстрочный интервал (множитель)
line_spacing = 1.20


# === Прочее ===
# Учитывать EXIF-ориентацию
respect_exif_orientation = true

# Логи
logging_level = "INFO"
log_to_file = false
log_file = "overlay.log"

# Сухой запуск: true = только отчёт, файлы не пишутся
dry_run = false
