#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥ –∫–∞–∂–¥—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª.
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ config.toml (—Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º).
- –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: python make_image_from_audio.py
- –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.11+ (tomllib) –∏ Pillow (PIL).

–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Pillow –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:
    pip install Pillow
"""

from __future__ import annotations

import io
import re
import traceback
from pathlib import Path
from typing import Dict, Any, List, Tuple, Optional
from dataclasses import dataclass

# --- –ß—Ç–µ–Ω–∏–µ TOML ---
try:
    import tomllib  # Python 3.11+
except Exception:
    print("‚ùå –ù—É–∂–µ–Ω Python 3.11+ (–º–æ–¥—É–ª—å tomllib). –û–±–Ω–æ–≤–∏—Ç–µ Python.")
    raise

# --- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Pillow) ---
try:
    from PIL import Image, ImageDraw
except Exception:
    print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Pillow (PIL). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install Pillow")
    raise

# --- –ü–æ—Ç–æ–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ---
from concurrent.futures import ThreadPoolExecutor, as_completed


# =========================
# –£–¢–ò–õ–ò–¢–´ / I/O
# =========================

def script_dir() -> Path:
    """–ö–∞—Ç–∞–ª–æ–≥, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç."""
    return Path(__file__).resolve().parent


def load_config() -> Dict[str, Any]:
    """–ò—â–µ–º config.toml —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º –∏ –ø–∞—Ä—Å–∏–º –µ–≥–æ."""
    cfg_path = script_dir() / "config.toml"
    if not cfg_path.exists():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: {cfg_path}")
        raise SystemExit(1)
    try:
        with open(cfg_path, "rb") as f:
            data = tomllib.load(f)
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {cfg_path}:\n{e}")
        raise SystemExit(1)


def log_print(msg: str, log_fp: Optional[io.TextIOBase]):
    """–ü–µ—á–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∏ (–æ–ø—Ü.) –≤ —Ñ–∞–π–ª –ª–æ–≥–∞."""
    print(msg)
    if log_fp:
        log_fp.write(msg + "\n")
        log_fp.flush()


def ensure_dir(p: Path):
    """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–≤–∫–ª—é—á–∞—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π)."""
    p.mkdir(parents=True, exist_ok=True)


def is_audio_file(path: Path, audio_exts: List[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)."""
    ext = path.suffix.lower()
    return ext in [e.lower() for e in audio_exts]


def safe_name_with_suffix(target: Path) -> Path:
    """–í–µ—Ä–Ω—É—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _1, _2, ... –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if not target.exists():
        return target
    stem, suffix = target.stem, target.suffix
    parent = target.parent
    i = 1
    while True:
        candidate = parent / f"{stem}_{i}{suffix}"
        if not candidate.exists():
            return candidate
        i += 1


# =========================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–û–ù–ê
# =========================

def hex_to_rgba(color_hex: str) -> Tuple[int, int, int, int]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç #RRGGBB –∏–ª–∏ #RRGGBBAA –≤ RGBA."""
    s = color_hex.strip()
    if not s.startswith("#"):
        raise ValueError("–¶–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ #RRGGBB –∏–ª–∏ #RRGGBBAA")
    s = s[1:]
    if len(s) == 6:
        r = int(s[0:2], 16)
        g = int(s[2:4], 16)
        b = int(s[4:6], 16)
        a = 255
    elif len(s) == 8:
        r = int(s[0:2], 16)
        g = int(s[2:4], 16)
        b = int(s[4:6], 16)
        a = int(s[6:8], 16)
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ HEX-—Å—Ç—Ä–æ–∫–∏ —Ü–≤–µ—Ç–∞")
    return (r, g, b, a)


def make_solid_image(w: int, h: int, rgba: Tuple[int, int, int, int]) -> Image.Image:
    """–°–æ–∑–¥–∞—Ç—å –æ–¥–Ω–æ—Ç–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ RGBA."""
    return Image.new("RGBA", (w, h), rgba)


def make_gradient_image(
    w: int,
    h: int,
    rgba_from: Tuple[int, int, int, int],
    rgba_to: Tuple[int, int, int, int],
    direction: str
) -> Image.Image:
    """–°–æ–∑–¥–∞—Ç—å –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π/–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)."""
    base = Image.new("RGBA", (w, h), (0, 0, 0, 0))
    draw = ImageDraw.Draw(base)

    if (direction or "vertical").lower() == "horizontal":
        for x in range(w):
            t = x / max(1, (w - 1))
            r = int(rgba_from[0] + (rgba_to[0] - rgba_from[0]) * t)
            g = int(rgba_from[1] + (rgba_to[1] - rgba_from[1]) * t)
            b = int(rgba_from[2] + (rgba_to[2] - rgba_from[2]) * t)
            a = int(rgba_from[3] + (rgba_to[3] - rgba_from[3]) * t)
            draw.line([(x, 0), (x, h)], fill=(r, g, b, a))
    else:
        for y in range(h):
            t = y / max(1, (h - 1))
            r = int(rgba_from[0] + (rgba_to[0] - rgba_from[0]) * t)
            g = int(rgba_from[1] + (rgba_to[1] - rgba_from[1]) * t)
            b = int(rgba_from[2] + (rgba_to[2] - rgba_from[2]) * t)
            a = int(rgba_from[3] + (rgba_to[3] - rgba_from[3]) * t)
            draw.line([(0, y), (w, y)], fill=(r, g, b, a))

    return base


def fit_background(img: Image.Image, canvas_w: int, canvas_h: int, mode: str) -> Image.Image:
    """
    –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏:
      contain ‚Äî –≤–ø–∏—Å–∞—Ç—å –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏ (letterbox)
      cover   ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å—ë, –æ–±—Ä–µ–∑–∞—è –ª–∏—à–Ω–µ–µ
      stretch ‚Äî —Ä–∞—Å—Ç—è–Ω—É—Ç—å –¥–æ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    """
    mode = (mode or "contain").lower()
    if mode == "stretch":
        return img.resize((canvas_w, canvas_h), Image.LANCZOS)

    iw, ih = img.size
    if iw == 0 or ih == 0:
        return Image.new("RGBA", (canvas_w, canvas_h), (0, 0, 0, 0))

    scale_w = canvas_w / iw
    scale_h = canvas_h / ih
    scale = max(scale_w, scale_h) if mode == "cover" else min(scale_w, scale_h)

    new_w = max(1, int(round(iw * scale)))
    new_h = max(1, int(round(ih * scale)))
    resized = img.resize((new_w, new_h), Image.LANCZOS)

    canvas = Image.new("RGBA", (canvas_w, canvas_h), (0, 0, 0, 0))
    off_x = (canvas_w - new_w) // 2
    off_y = (canvas_h - new_h) // 2
    canvas.paste(resized, (off_x, off_y))
    return canvas


def make_background(cfg_img: Dict[str, Any]) -> Image.Image:
    """–°–æ–±—Ä–∞—Ç—å —Ñ–æ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É image.background. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç RGBA-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."""
    w = int(cfg_img.get("width", 1920))
    h = int(cfg_img.get("height", 1080))
    bg = cfg_img.get("background", {}) or {}
    bg_type = (bg.get("type") or "color").lower()

    if bg_type == "color":
        rgba = hex_to_rgba(str(bg.get("value", "#000000")))
        return make_solid_image(w, h, rgba)

    if bg_type == "gradient":
        c_from = hex_to_rgba(str(bg.get("from", "#000000")))
        c_to   = hex_to_rgba(str(bg.get("to", "#FFFFFF")))
        direction = str(bg.get("direction", "vertical"))
        return make_gradient_image(w, h, c_from, c_to, direction)

    if bg_type == "image":
        path = bg.get("path")
        fit = str(bg.get("fit", "contain"))
        if not path:
            raise ValueError("–î–ª—è background.type='image' —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä 'path'")
        p = Path(path)
        if not p.exists():
            raise FileNotFoundError(f"–§–æ–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {p}")
        img = Image.open(p).convert("RGBA")
        return fit_background(img, w, h, fit)

    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ–Ω–∞: {bg_type}")


# =========================
# –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –§–ê–ô–õ–û–í
# =========================

def passes_suffix_filters(stem: str, cfg: Dict[str, Any]) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤.
    - exclude_suffixes: –µ—Å–ª–∏ stem –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö -> –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.
    - include_suffixes: –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ù–ï –ø—É—Å—Ç–æ–π, stem –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö.
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.
    """
    excl = [s.lower() for s in (cfg.get("exclude_suffixes") or [])]
    incl = [s.lower() for s in (cfg.get("include_suffixes") or [])]

    s = stem.lower()

    # –°–Ω–∞—á–∞–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    for suf in excl:
        if suf and s.endswith(suf):
            return False

    # –ü–æ—Ç–æ–º —É—Å–ª–æ–≤–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ
    if incl:  # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—É—Å—Ç–æ–π ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥—è—Ç
        for suf in incl:
            if suf and s.endswith(suf):
                return True
        return False

    # –ï—Å–ª–∏ include_suffixes –ø—É—Å—Ç ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ—Ç, —Ñ–∞–π–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç
    return True


def collect_audio_files(cfg: Dict[str, Any], log_fp: Optional[io.TextIOBase]) -> List[Path]:
    """–°–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ input_dir (+recursive) –∏ input_files, –ø—Ä–∏–º–µ–Ω—è—è —Ñ–∏–ª—å—Ç—Ä—ã —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤."""
    audio_exts = cfg.get("audio_exts") or [".mp3", ".wav", ".m4a", ".flac"]
    input_dir = (cfg.get("input_dir") or "").strip()
    recursive = bool(cfg.get("recursive", True))
    input_files = cfg.get("input_files") or []

    files: List[Path] = []

    # –ò–∑ –ø–∞–ø–∫–∏
    if input_dir:
        base = Path(input_dir)
        if base.exists() and base.is_dir():
            pattern = "**/*" if recursive else "*"
            for p in base.glob(pattern):
                if p.is_file() and is_audio_file(p, audio_exts):
                    if passes_suffix_filters(p.stem, cfg):
                        files.append(p.resolve())
                    else:
                        log_print(f"üö´ –§–∏–ª—å—Ç—Ä —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –∏—Å–∫–ª—é—á–∏–ª: {p.name}", log_fp)
        else:
            log_print(f"‚ö†Ô∏è  input_dir –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø–∞–ø–∫–∞: {base}", log_fp)

    # –ò–∑ —Å–ø–∏—Å–∫–∞
    for f in input_files:
        p = Path(f)
        if p.exists() and p.is_file():
            if is_audio_file(p, audio_exts):
                if passes_suffix_filters(p.stem, cfg):
                    files.append(p.resolve())
                else:
                    log_print(f"üö´ –§–∏–ª—å—Ç—Ä —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –∏—Å–∫–ª—é—á–∏–ª: {p.name}", log_fp)
            else:
                log_print(f"‚ö†Ô∏è  –í input_files –≤—Å—Ç—Ä–µ—á–µ–Ω –Ω–µ-–∞—É–¥–∏–æ —Ñ–∞–π–ª: {p}", log_fp)
        else:
            log_print(f"‚ö†Ô∏è  –í input_files –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {p}", log_fp)

    uniq = sorted(set(files))
    log_print(f"–ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏): {len(uniq)}", log_fp)
    return uniq


# =========================
# –ü–£–¢–ò –í–´–í–û–î–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï
# =========================

def compute_output_path(in_file: Path, cfg: Dict[str, Any], image_format: str) -> Path:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç output_dir (–∏–ª–∏ —Ä—è–¥–æ–º), mirror_subdirs, output_suffix –∏ —Ñ–æ—Ä–º–∞—Ç.
    """
    out_dir_cfg = (cfg.get("output_dir") or "").strip()
    mirror = bool(cfg.get("mirror_subdirs", True))
    suffix = (cfg.get("output_suffix") or "").strip()

    if not out_dir_cfg:
        target_dir = in_file.parent
    else:
        base_out = Path(out_dir_cfg)
        if not mirror:
            target_dir = base_out
        else:
            input_dir = (cfg.get("input_dir") or "").strip()
            if input_dir:
                try:
                    rel = in_file.parent.resolve().relative_to(Path(input_dir).resolve())
                    target_dir = base_out / rel
                except Exception:
                    target_dir = base_out
            else:
                target_dir = base_out

    ensure_dir(target_dir)

    # –ò–º—è —Ñ–∞–π–ª–∞ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
    stem = in_file.stem + suffix if suffix else in_file.stem
    new_name = f"{stem}.{image_format.lower()}"
    return target_dir / new_name


def save_image(
    img: Image.Image,
    path: Path,
    image_format: str,
    jpeg_quality: int,
    conflicts: str,
    dry_run: bool,
    log_fp: Optional[io.TextIOBase]
):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤."""
    image_format = image_format.upper()
    conflicts = (conflicts or "skip").lower()

    target = path
    if target.exists():
        if conflicts == "skip":
            log_print(f"‚è≠Ô∏è  –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {target}", log_fp)
            return
        if conflicts == "rename":
            target = safe_name_with_suffix(target)
        elif conflicts == "overwrite":
            pass
        else:
            log_print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ conflicts='{conflicts}', —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 'skip'", log_fp)
            return

    if dry_run:
        log_print(f"[dry-run] –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –±—ã: {target}", log_fp)
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –±–µ–∑ –∞–ª—å—Ñ—ã
    save_kwargs = {}
    to_save = img
    if image_format in ("JPG", "JPEG", "WEBP"):
        save_kwargs["quality"] = max(1, min(95, int(jpeg_quality)))
        if to_save.mode not in ("RGB", "L"):
            bg = Image.new("RGB", to_save.size, (255, 255, 255))
            to_save_alpha = to_save.split()[-1] if "A" in to_save.getbands() else None
            bg.paste(to_save, mask=to_save_alpha)
            to_save = bg

    to_save.save(target, format=image_format, **save_kwargs)
    log_print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {target}", log_fp)


# =========================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
# =========================

@dataclass
class Job:
    in_file: Path
    out_file: Path


def process_one(job: Job, cfg_img: Dict[str, Any], conflicts: str, dry_run: bool, log_fp: Optional[io.TextIOBase]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å."""
    try:
        img = make_background(cfg_img)
        save_image(
            img=img,
            path=job.out_file,
            image_format=str(cfg_img.get("format", "png")),
            jpeg_quality=int(cfg_img.get("jpeg_quality", 90)),
            conflicts=conflicts,
            dry_run=dry_run,
            log_fp=log_fp
        )
        return True, None
    except Exception:
        tb = traceback.format_exc()
        log_print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {job.in_file}:\n{tb}", log_fp)
        return False, None


def main():
    cfg = load_config()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    dry_run = bool(cfg.get("dry_run", False))
    conflicts = str(cfg.get("conflicts", "skip"))
    workers = int(cfg.get("workers", 0))
    log_file = (cfg.get("log_file") or "").strip()

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    log_fp: Optional[io.TextIOBase] = None
    if log_file:
        try:
            Path(log_file).parent.mkdir(parents=True, exist_ok=True)
            log_fp = open(log_file, "a", encoding="utf-8")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–≥-—Ñ–∞–π–ª '{log_file}': {e}")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    cfg_img = cfg.get("image") or {}
    cfg_img.setdefault("width", 1920)
    cfg_img.setdefault("height", 1080)
    cfg_img.setdefault("format", "png")
    cfg_img.setdefault("jpeg_quality", 90)
    if "background" not in cfg_img:
        cfg_img["background"] = {"type": "color", "value": "#000000"}

    # –°–±–æ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    files = collect_audio_files(cfg, log_fp)
    if not files:
        log_print("‚ÑπÔ∏è  –ê—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ.", log_fp)
        if log_fp:
            log_fp.close()
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
    image_format = str(cfg_img.get("format", "png"))
    jobs: List[Job] = []
    for f in files:
        out = compute_output_path(f, cfg, image_format=image_format)
        jobs.append(Job(in_file=f, out_file=out))

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
    log_print(f"–°—Ç–∞—Ä—Ç. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(jobs)} | dry_run={dry_run} | workers={workers}", log_fp)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞
    ok = 0
    fail = 0

    if workers and workers > 1:
        with ThreadPoolExecutor(max_workers=workers) as ex:
            futures = {ex.submit(process_one, job, cfg_img, conflicts, dry_run, log_fp): job for job in jobs}
            for fut in as_completed(futures):
                success, _ = fut.result()
                ok += 1 if success else 0
                fail += 0 if success else 1
    else:
        for job in jobs:
            success, _ = process_one(job, cfg_img, conflicts, dry_run, log_fp)
            ok += 1 if success else 0
            fail += 0 if success else 1

    # –ò—Ç–æ–≥
    log_print(f"–ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—à–Ω–æ: {ok} | –û—à–∏–±–æ–∫: {fail}", log_fp)
    if log_fp:
        log_fp.close()


if __name__ == "__main__":
    main()
